services:

  # App контейнер
  app:
    # Для установки нужных пакетов используем не чистый образ, а инструкции из конкретного файла Dockerfile
    build:
      context: .
      args:
        - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
      dockerfile: ./docker-compose/backend/Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - .:/var/www # Монтируем локальную папку в контейнер как /var/www
      - ./docker-compose/backend/php.ini:/usr/local/etc/php/php.ini
    depends_on:
      - db
    networks:
      - realtracker

  # Nginx контейнер для вебсервера
  nginx:
    # Используем готовый образ для nginx контейнера
    image: nginx:alpine
    restart: unless-stopped
    tty: true
    ports:
      - "80:80" # Внутренний порт контейнера пробрасываем на host машину
    volumes:
      - .:/var/www # Монтируем локальную папку в контейнер как /var/www
      - ./docker-compose/nginx/conf.d/:/etc/nginx/conf.d/ # Передаем в контейнер конфигурационные файлы nginx
    depends_on:
      - app
    networks:
      - realtracker

  # MySQL контейнер
  db:
#    image: "mysql/mysql-server:8.0"
    image: mysql:latest
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci'] #'--default-authentication-plugin=mysql_native_password']
    environment:
        MYSQL_DATABASE: '${DB_DATABASE}'
        MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
        MYSQL_PASSWORD: '${DB_PASSWORD}'
        MYSQL_USER: '${DB_USERNAME}'
        SERVICE_TAGS: dev
        SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql # Используем именованный том из блока volumes
      - ./docker-compose/mysql/my.cnf:/etc/mysql/my.cnf # Передаем в контейнер конфигурационный файл
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping" ]
    networks:
       - realtracker

  # Для сборки js
  node:
    build:
        context: .
        dockerfile: ./docker-compose/nodejs/Dockerfile
    tty: true
    ports:
        - "5173:5173"
    working_dir: /var/www
    volumes:
        - .:/var/www # Монтируем локальную папку в контейнер как /var/www
    networks:
       - realtracker

networks:
    realtracker:
        driver: bridge

# Тома
volumes:
  # Чтобы данные БД не пропадали после выключения создаем именованный том
  dbdata:
    driver: local
    driver_opts:
      type: none
      device: "./docker-compose/mysql/dbdata"
      o: bind
